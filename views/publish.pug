doctype html
html
  title Publish episode
  meta(charset="utf-8")
  meta(name="viewport" content="width=device-width, initial-scale=1")
  link(rel="stylesheet" href="https://unpkg.com/tachyons/css/tachyons.min.css")
  script(type="text/javascript").
    function escapeFields(fields) {
      for (var i = 0; i < fields.length; i++) {
        fields[i].value = fields[i].value
          .replace(/ä/g, '&auml;')
          .replace(/Ä/g, '&Auml;')
          .replace(/ü/g, '&uuml;')
          .replace(/Ü/g, '&Uuml;')
          .replace(/ö/g, '&ouml;')
          .replace(/Ö/g, '&Ouml;')
          .replace(/ß/g, '&szlig;');
      }
    }

    function onSubmit() {
      // Set #date value
      document.getElementById('date').value =
        new Date(
          document.getElementById('date-helper').value + 'T' +
          document.getElementById('time-helper').value
        ).toUTCString();

      // Escape text values
      escapeFields([
        document.getElementById('title'),
        document.getElementById('description'),
        document.getElementById('author')
      ]);

      // Build x-amz-credential field
      var accessKey = document.getElementById('access-key').value;
      document.getElementById('aws-credential').value =
        accessKey + '/#{auth.expireDate.short}/#{config.region}/s3/aws4_request';

      // Update localStorage
      window.localStorage.setItem('aws-access-key', accessKey);

      return true;
    }

    function pad(num) {
      if (num < 10) {
        return '0' + num;
      }

      return num;
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Fill out access-key from localStorage
      document.getElementById('access-key').value =
        window.localStorage.getItem('aws-access-key');
      // Fill out date and time fields
      const now = new Date();
      document.getElementById('date-helper').value =
        now.getFullYear() + '-' + pad(now.getMonth() + 1) + '-' +
        pad(now.getDate());
      document.getElementById('time-helper').value =
        pad(now.getHours()) + ':' + pad(now.getMinutes());
    });
  body
    section.pa4
      h1.f3.f2-m.f1-l Publish episode to #{config.podcast.title}
      form.cf.pa3.black-80(action=config.link method="POST"
        enctype="multipart/form-data" onsubmit="return onSubmit()")
        input(type="hidden" name="acl" value="public-read")
        input(type="hidden" name="Content-Type" value="audio/mpeg")
        input(type="hidden" name="key" value="episodes/${filename}")
        input(type="hidden" name="policy" value=auth.policyBase64)
        input(type="hidden" name="success_action_redirect" value=config.podcast.baseURL + "/publish.html?success=true")
        input(type="hidden" name="x-amz-algorithm" value="AWS4-HMAC-SHA256")
        input(type="hidden" id="aws-credential" name="x-amz-credential" required)
        input(type="hidden" name="x-amz-date" value=auth.expireDate.long)
        input(type="hidden" name="x-amz-signature" value=auth.signature)
        input(type="hidden" id="date" name="x-amz-meta-date" required)

        // User input
        div.fl.w-50.w-100-m.pv3
          div.measure
            label.f6.b.db.mb2(for="title") Title
            input#title.input-reset.ba.b--black-20.pa2.mb2.db.w-100(type="text" aria-describedby="title-desc" name="x-amz-meta-title" placeholder="Title" required)
            small#title-desc.f6.black-60.db.mb2 The title of the episode.

          div.measure
            label.f6.b.db.mb2(for="description") Description
              span.normal.black-60.ph1 (optional)
            input#description.input-reset.ba.b--black-20.pa2.mb2.db.w-100(type="text" aria-describedby="description-desc" name="x-amz-meta-description" placeholder="Description")
            small#description-desc.f6.black-60.db.mb2 The description of the episode.

          div.measure
            label.f6.b.db.mb2(for="author") Author
            input#author.input-reset.ba.b--black-20.pa2.mb2.db.w-100(type="text"
            aria-describedby="author-desc" name="x-amz-meta-author" placeholder="Author" required)
            small#author-desc.f6.black-60.db.mb2 The author of the episode.

        div.fl.w-50.w-100-m.pv3
          div.measure
            label.f6.b.db.mb2(for="date-helper") Date
            input#date-helper.input-reset.ba.b--black-20.pa2.mb2.db.w-100(type="date" aria-describedby="date-helper-desc")
            small#date-helper-desc.f6.black-60.db.mb2 The date of the episode.

          div.measure
            label.f6.b.db.mb2(for="time-helper") Time
            input#time-helper.input-reset.ba.b--black-20.pa2.mb2.db.w-100(type="time" aria-describedby="time-helper-desc")
            small#time-helper-desc.f6.black-60.db.mb2 The time of the episode.

          div.measure
            label.f6.b.db.mb2(for="duration") Duration
            input#duration.input-reset.ba.b--black-20.pa2.mb2.db.w-100(type="text" aria-describedby="duration-desc" name="x-amz-meta-duration" pattern="\\d+:\\d+" placeholder="23:42" required)
            small#duration-desc.f6.black-60.db.mb2 The duration of the episode (mm:ss).

        div.fl.w-50.w-100-m.pv3
          div.measure
            label.f6.b.db.mb2(for="access-key") Access Key
            input#access-key.input-reset.ba.b--black-20.pa2.mb2.db.w-100(type="text" aria-describedby="access-key-desc" placeholder="AWS Access Key Id" required)
            small#access-key-desc.f6.black-60.db.mb2 The AWS Access Key.

        div.fl.w-50.w-100-m.pv3
          div.measure
            label.f6.b.db.mb2(for="file") File
            input#file.input-reset.ba.b--black-20.pa2.mb2.db.w-100(name="file" type="file" accept="audio/mp3" required)
            small#file-desc.f6.black-60.db.mb2 The audio file.

        input.bn.button-reset.f6.link.dim.br1.ph3.pv2.mb2.dib.white.bg-near-black.pointer(type="submit" value="Publish episode")
    footer.ph3.ph5-m.ph6-l.light-silver.pb4
      small.f6.db.tc
        | © #{new Date().getFullYear()} #{config.podcast.author}
        if config.podcast.imprintURL
          a.f6.dib.ph2.link.silver.dim(href=config.podcast.imprintURL) Imprint
